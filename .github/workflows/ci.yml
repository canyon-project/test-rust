name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Rust tests
      run: cargo test

    - name: Build Rust library
      run: cargo build --release

    - name: Copy library file (Unix)
      if: runner.os != 'Windows'
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          cp target/release/librust_add.dylib ./
        else
          cp target/release/librust_add.so ./
        fi

    - name: Copy library file (Windows)
      if: runner.os == 'Windows'
      run: copy target\release\rust_add.dll .\

    - name: Run Go tests
      run: go test -v

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
      shell: bash
      if: runner.os != 'Windows'

    - name: Run Go vet
      run: go vet ./...